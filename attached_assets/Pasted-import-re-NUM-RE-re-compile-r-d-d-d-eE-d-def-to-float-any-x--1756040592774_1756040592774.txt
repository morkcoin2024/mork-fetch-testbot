import re

_NUM_RE = re.compile(r"[-+]?(?:\d+\.?\d*|\.\d+)(?:[eE][-+]?\d+)?")

def _to_float_any(x):
    if x is None: return None
    if isinstance(x, (int, float)): return float(x)
    s = str(x).strip()
    if not s: return None
    # remove thousands separators and currency/unit glyphs; keep first numeric token
    s = s.replace(",", "")
    m = _NUM_RE.search(s)
    if not m: return None
    try: return float(m.group(0))
    except Exception: return None

def _to_int_any(x):
    v = _to_float_any(x)
    return None if v is None else int(v)

def _pick(d, *keys):
    if not isinstance(d, dict): return None
    for k in keys:
        if k in d and d[k] not in (None, "", "?"):
            return d[k]
    return None

def _fmt_usd(v):
    try: return f"${float(v):,.2f}"
    except Exception: return "?"

def _fmt_qty(v):
    try: return f"{float(v):,.2f}"
    except Exception: return "?"

def _fmt_int(v):
    try: return f"{int(v):,}"
    except Exception: return "?"

# --- robust getters (wire these in your /watchlist path) ---

def _get_supply_val(mint: str):
    try:
        s = _supply_for_mint(mint)
        # common shapes from different sources
        raw = _pick(s, "circulating", "circulatingSupply", "circulating_supply", "circ", "supply_circ", "value") if isinstance(s, dict) else s
        v = _to_float_any(raw)
        if v is not None:
            return v
        # fallback to total if circulating missing
        t = _total_supply_for_mint(mint)
        t = _pick(t, "total", "totalSupply", "total_supply", "supply_total", "value") if isinstance(t, dict) else t
        return _to_float_any(t)
    except Exception:
        return None

def _get_fdv_val(mint: str):
    # try explicit fdv fields first
    try:
        fdv = _fdv_for_mint(mint)
        raw = _pick(fdv, "fdv", "fdv_usd", "fully_diluted_valuation", "fullyDilutedValuation", "value") if isinstance(fdv, dict) else fdv
        v = _to_float_any(raw)
        if v is not None:
            return v
    except Exception:
        pass
    # fallback: price * total supply
    try:
        price = _to_float_any(_price_for_mint(mint))
        total = _total_supply_for_mint(mint)
        total = _pick(total, "total", "totalSupply", "total_supply", "supply_total", "value") if isinstance(total, dict) else total
        total = _to_float_any(total)
        if price is not None and total is not None:
            return price * total
    except Exception:
        pass
    return None

def _get_vol24_val(mint: str):
    try:
        v = _volume24h_for_mint(mint)
        # include many common key variants
        raw = _pick(
            v,
            "volume24h", "volume_24h", "vol24h", "vol_24h",
            "volumeUsd24h", "volume_usd_24h", "usd24h", "v24hUSD",
            "h24Usd", "h24_usd", "value"
        ) if isinstance(v, dict) else v
        return _to_float_any(raw)
    except Exception:
        return None

def _get_holders_val(mint: str):
    try:
        h = _holders_for_mint(mint)
        raw = _pick(h, "holders", "holder_count", "holderCount", "value") if isinstance(h, dict) else h
        return _to_int_any(raw)
    except Exception:
        return None