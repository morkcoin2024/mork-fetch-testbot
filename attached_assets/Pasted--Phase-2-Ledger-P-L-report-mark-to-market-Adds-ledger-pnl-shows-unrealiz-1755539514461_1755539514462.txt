# === Phase 2: Ledger P&L report (mark-to-market) ===
# Adds:
#   /ledger_pnl      -> shows unrealized, realized, total, per-position lines (admin)
#   /paper_setprice  -> manual price override for testing (admin; optional)

cd /home/runner/workspace

# 1) autosell.py â€” add a price override map + P&L calc helpers
applypatch <<'PATCH'
*** Begin Patch
*** Update File: autosell.py
@@
 _LEDGER = {"positions": {}, "realized": 0.0}  # mint -> {qty, avg}; realized P&L total
+_PRICE_OVERRIDES = {}  # mint -> float

@@
 def _get_price(mint:str):
-    # try dexscreener / birdeye etc, else None
+    # manual override for testing
+    if mint in _PRICE_OVERRIDES:
+        return float(_PRICE_OVERRIDES[mint]), "override"
+    # try dexscreener / birdeye etc, else None
@@
     return None, None
+
+def set_price_override(mint:str, price:float):
+    try:
+        p = float(price)
+        if p <= 0:
+            return False
+        with _LOCK:
+            _PRICE_OVERRIDES[mint] = p
+        _event(f"[PRICE] override {mint}={p}")
+        return True
+    except Exception:
+        return False
+
+def clear_price_override(mint:str):
+    with _LOCK:
+        _PRICE_OVERRIDES.pop(mint, None)
+    _event(f"[PRICE] override cleared {mint}")
+    return True
+
+def ledger_mark_to_market():
+    """Return detailed P&L snapshot using live (or override/sim) prices."""
+    lines = []
+    unreal = 0.0
+    with _LOCK:
+        pos = {k: {"qty": v["qty"], "avg": v["avg"]} for k,v in _LEDGER["positions"].items()}
+        realized = float(_LEDGER["realized"])
+    for mint, p in pos.items():
+        if p["qty"] <= 0:
+            continue
+        px, src = _get_price(mint)
+        if px is None:
+            px = _sim_price(mint); src = "sim"
+        u = (px - p["avg"]) * p["qty"]
+        unreal += u
+        lines.append({
+            "mint": mint, "qty": round(p["qty"],6), "avg": round(p["avg"],6),
+            "px": round(px,6), "src": src, "unreal": round(u,6)
+        })
+    total = realized + unreal
+    return {"lines": lines, "unreal": round(unreal,6), "realized": round(realized,6), "total": round(total,6)}
*** End Patch
PATCH

# 2) app.py â€” wire commands
applypatch <<'PATCH'
*** Begin Patch
*** Update File: app.py
@@
             "/watch", "/unwatch", "/watchlist", "/watch_sens",
-            "/paper_buy", "/paper_sell", "/ledger", "/ledger_reset"
+            "/paper_buy", "/paper_sell", "/ledger", "/ledger_reset",
+            "/ledger_pnl", "/paper_setprice"
         ]
@@
         elif cmd == "/ledger_reset":
             deny = _require_admin(user)
             if deny: return deny
             import autosell
             autosell.ledger_reset()
             return _reply("ðŸ§¹ Ledger reset")
+
+        elif cmd == "/ledger_pnl":
+            deny = _require_admin(user)
+            if deny: return deny
+            import autosell
+            snap = autosell.ledger_mark_to_market()
+            if not snap["lines"]:
+                return _reply(f"ðŸ“Š P&L: positions=0\nrealized={snap['realized']:.6f}\nunrealized=0.000000\ntotal={snap['realized']:.6f}")
+            rows = [f"- {l['mint']} qty={l['qty']:.6f} avg={l['avg']:.6f} px={l['px']:.6f} ({l['src']}) uPnL={l['unreal']:.6f}" for l in snap["lines"]]
+            return _reply("ðŸ“Š P&L:\n" + "\n".join(rows) + f"\nrealized={snap['realized']:.6f}\nunrealized={snap['unreal']:.6f}\n**total={snap['total']:.6f}**")
+
+        elif cmd == "/paper_setprice":
+            deny = _require_admin(user)
+            if deny: return deny
+            import autosell
+            parts = (args or "").split()
+            if len(parts) < 2:
+                return _reply("Usage: /paper_setprice <mint> <price>")
+            mint, price = parts[0], parts[1]
+            ok = autosell.set_price_override(mint, price)
+            return _reply("ðŸ§ª Price override " + ("set." if ok else "failed."))
*** End Patch
PATCH

# 3) Quick smoke test (router-only)
python3 - <<'PY'
from app import process_telegram_command
def run(t):
    upd={'message':{'message_id':1,'date':0,'chat':{'id':1,'type':'private'},
                    'from':{'id':1,'is_bot':False,'username':'x'},'text':t}}
    out=process_telegram_command(upd) or {}
    print(t, "->", out.get("status"), (out.get("response") or "")[:120].replace("\n"," "))
tests = [
    "/paper_buy So11111111111111111111111111111111111111112 1 100",
    "/paper_setprice So11111111111111111111111111111111111111112 105",
    "/ledger_pnl",
]
for t in tests: run(t)
PY
