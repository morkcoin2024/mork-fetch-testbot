def price_birdeye(mint: str):
    """
    Robust Birdeye price fetcher:
      1) /defi/price
      2) /public/price
      3) /defi/v3/token/market-data
      4) /public/multi_price
      5) /defi/multi_price
    Accepts data.value, data.price*, market fields, or data[addr].value (multi).
    """
    import os, requests, math, json
    api_key = os.getenv("BIRDEYE_API_KEY", "").strip()
    if not api_key:
        return {"ok": False, "err": "birdeye missing api key"}

    sess = requests.Session()
    base = "https://public-api.birdeye.so"
    headers = {
        "X-API-KEY": api_key,
        "Accept": "application/json",
        # some routes accept chain only as query; we still send the header harmlessly
        "X-Chain": "solana",
        "User-Agent": "fetch-bot/1.0",
    }

    def _req(path, params=None, multi=False):
        url = f"{base}{path}"
        qp = {"chain": "solana"}
        if multi:
            qp["addresses"] = mint
        else:
            qp["address"] = mint
        if params:
            qp.update(params)
        r = sess.get(url, headers=headers, params=qp, timeout=8)
        body_snip = ""
        try:
            body_snip = r.text[:120].replace("\n"," ")
        except Exception:
            pass
        print(f"INFO:birdeye_req status={r.status_code} path={path} qp={json.dumps(qp,separators=(',',':'))} body~={body_snip!r}")
        if r.status_code != 200:
            return None
        try:
            return r.json()
        except Exception:
            return None

    def _extract_price(j):
        if not j:
            return None
        d = j.get("data") or {}
        # simple scalar fields
        for k in ("value","price","priceUsd","price_usd","market_price_usd"):
            v = d.get(k)
            if v is not None:
                try:
                    f = float(v)
                    if math.isfinite(f) and f > 0:
                        return f
                except Exception:
                    pass
        # v3 market-data sometimes nests price-like fields
        if isinstance(d, dict):
            for k, v in d.items():
                if isinstance(v, (int,float)) and "price" in k and v > 0:
                    return float(v)
        # multi_price shape: {"data": { "<addr>": {"value": 178.12, ...} } }
        if isinstance(d, dict):
            node = d.get(mint)
            if isinstance(node, dict):
                v = node.get("value")
                try:
                    f = float(v)
                    if math.isfinite(f) and f > 0:
                        return f
                except Exception:
                    pass
        return None

    # 1) /defi/price
    for path, kwargs in [
        ("/defi/price",          {"multi": False}),
        ("/public/price",        {"multi": False}),
        ("/defi/v3/token/market-data", {"multi": False}),
        ("/public/multi_price",  {"multi": True}),
        ("/defi/multi_price",    {"multi": True}),
    ]:
        j = _req(path, multi=kwargs["multi"])
        p = _extract_price(j)
        if p:
            return {"ok": True, "price": p, "source": "birdeye"}

    return {"ok": False, "err": "birdeye all endpoints failed"}
