# === [PATCH] Add /about + /alert commands ===================================

elif cmd == "/about":
    # /about <mint> ‚Äî info card with ticker/long name + timeframes
    if len(parts) < 2:
        tg_send(chat_id, "Usage: /about <mint>", preview=True)
        return {"status": "error", "err": "missing mint"}

    mint = parts[1].strip()
    # current price (falls back to birdeye)
    src = CURRENT_PRICE_SOURCE if 'CURRENT_PRICE_SOURCE' in globals() else 'birdeye'
    pr  = get_price(mint, src)
    price  = float(pr.get("price") or 0.0)
    source = pr.get("source") or src

    # names + timeframes
    name_display = resolve_token_name(mint) or ""
    tf = fetch_timeframes(mint) or {}

    # uniform list layout (ticker line, long name line, short mint line)
    text = render_about_list(mint, price, source, name_display, tf)
    tg_send(chat_id, text, preview=True)
    return {"status": "ok", "price": price, "source": source}

# ---------------------------------------------------------------------------

elif cmd == "/alert":
    # /alert <mint> ‚Äî send a one-off ‚ÄúPrice Alert‚Äù card to alerts chat (or here)
    import json

    def _jload(path, default):
        try:
            with open(path, "r") as f:
                return json.load(f)
        except Exception:
            return default

    if len(parts) < 2:
        tg_send(chat_id, "Usage: /alert <mint>", preview=True)
        return {"status": "error", "err": "missing mint"}

    mint = parts[1].strip()
    src  = CURRENT_PRICE_SOURCE if 'CURRENT_PRICE_SOURCE' in globals() else 'birdeye'
    pr   = get_price(mint, src)
    price  = float(pr.get("price") or 0.0)
    source = pr.get("source") or src

    # read alerts config + baseline (same files used by auto alerts)
    cfg  = _jload("alerts_config.json", {})
    base = _jload("alerts_price_baseline.json", {})
    baseline = None
    if isinstance(base, dict):
        rec = base.get(mint)
        if isinstance(rec, dict) and rec.get("price"):
            try:
                baseline = float(rec["price"])
            except Exception:
                baseline = None

    # compute change vs baseline (if present)
    delta_pct = None
    if baseline and baseline > 0:
        delta_pct = (price - baseline) / baseline * 100.0

    # name (ticker on line 1, long name on line 2)
    name_display = resolve_token_name(mint) or ""
    short = f"({mint[:4]}..{mint[-4:]})"
    primary = name_display.split("\n")[0].strip() if name_display else short
    secondary = "\n".join(name_display.split("\n")[1:]).strip() if name_display else ""

    # arrow
    arrow = "‚ñ´Ô∏è"
    if delta_pct is not None:
        arrow = "üü¢‚ñ≤" if delta_pct >= 0 else "üî¥‚ñº"

    # compose alert card
    lines = []
    lines.append(f"Price Alert {arrow}")
    lines.append(f"Mint: {primary}")
    if secondary:
        lines.append(secondary)
    lines.append(short)
    lines.append(f"Price: ${price:.6f}")
    lines.append(f"Change: {'n/a' if delta_pct is None else f'{delta_pct:+.2f}%'}")
    lines.append(f"Baseline: {'n/a' if baseline is None else f'${baseline:.6f}'}")
    lines.append(f"Source: {source}")

    text = "\n".join(lines)

    # destination = alerts chat if configured, else current chat
    dest_chat = cfg.get("chat_id") or chat_id
    tg_send(dest_chat, text, preview=True)
    return {"status": "ok", "chat": dest_chat, "price": price, "baseline": baseline}

# === [/PATCH] ================================================================
