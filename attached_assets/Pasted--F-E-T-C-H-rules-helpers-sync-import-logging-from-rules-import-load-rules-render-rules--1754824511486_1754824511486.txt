# --- F.E.T.C.H rules helpers (sync) ---
import logging
from rules import load_rules, render_rules, get_rules_version

def cmd_rules_show_sync() -> str:
    try:
        load_rules()
        body = render_rules()
        return f"*rules.yaml (v{get_rules_version()})*:\n```\n{body}\n```"
    except Exception as e:
        logging.exception("rules_show error")
        return f"❌ rules_show failed: {e}"

def cmd_rules_reload_sync() -> str:
    try:
        load_rules(force=True)
        return f"✅ Rules reloaded (v{get_rules_version()})"
    except Exception as e:
        logging.exception("rules_reload error")
        return f"❌ rules_reload failed: {e}"

def cmd_fetch_now_sync() -> str:
    """Mock shortlist (filters & formatting). Replace with real data sources next."""
    try:
        rules = load_rules()
        N = int(rules.get("output", {}).get("max_results", 10))
        scan = rules.get("scan", {})

        items = [
            {"symbol":"FNM","name":"FennecMan","holders":210,"mcap_usd":120000,"liquidity_usd":18000,"age_min":45,"risk":38},
            {"symbol":"YOLO","name":"YoloCat","holders":560,"mcap_usd":350000,"liquidity_usd":42000,"age_min":70,"risk":52},
            {"symbol":"ZAP","name":"ZapFox","holders":95,"mcap_usd":80000,"liquidity_usd":12000,"age_min":30,"risk":41},
        ]

        out = []
        for t in items:
            if t["holders"] < scan.get("holders_min", 0): continue
            if t["holders"] > scan.get("holders_max", 10**9): continue
            if t["mcap_usd"] < scan.get("mcap_min_usd", 0): continue
            if t["mcap_usd"] > scan.get("mcap_max_usd", 10**12): continue
            if t["liquidity_usd"] < scan.get("liquidity_min_usd", 0): continue
            if t["age_min"] > scan.get("max_age_minutes", 10**9): continue
            out.append(t)

        out = sorted(out, key=lambda x: (x["risk"], -x["liquidity_usd"]))[:N]
        if not out:
            return "No candidates under current rules."

        lines = ["symbol | name | holders | mcap$ | liq$ | age_min | risk"]
        for t in out:
            lines.append(f"{t['symbol']} | {t['name']} | {t['holders']} | {t['mcap_usd']:,} | {t['liquidity_usd']:,} | {t['age_min']} | {t['risk']}")
        body = "\n".join(lines)
        if len(body) > 3800: body = body[:3800] + "\n…(truncated)…"
        return f"*F.E.T.C.H results (v{get_rules_version()})*\n```\n{body}\n```"
    except Exception as e:
        logging.exception("fetch_now error")
        return f"❌ fetch_now failed: {e}"
