# --- BEGIN PATCH: webhook admin commands (inside the big if user-is-admin command router) ---

                # /scan_start [interval_sec]
                elif text.strip().startswith("/scan_start"):
                    try:
                        parts = text.split()
                        interval = int(parts[1]) if len(parts) > 1 else None
                        if interval:
                            SCANNER.interval = max(5, interval)
                        SCANNER.start()
                        response_text = f"‚úÖ Birdeye scanner started (every {SCANNER.interval}s)"
                    except Exception as e:
                        response_text = f"‚ùå scan_start failed: {e}"

                # /scan_stop
                elif text.strip().startswith("/scan_stop"):
                    try:
                        SCANNER.stop()
                        response_text = "üõë Birdeye scanner stopped"
                    except Exception as e:
                        response_text = f"‚ùå scan_stop failed: {e}"

                # /scan_status
                elif text.strip().startswith("/scan_status"):
                    try:
                        st = SCANNER.status()
                        mode = SCAN_MODE if 'SCAN_MODE' in globals() else 'strict'
                        response_text = (
                            "üîç Scan Status\n"
                            f"running: {st['running']}\n"
                            f"interval: {st['interval']}s\n"
                            f"seen_cache: {st['seen_cache']}\n"
                            f"thread_alive: {st['thread_alive']}\n"
                            f"mode: {mode}"
                        )
                    except Exception as e:
                        response_text = f"‚ùå scan_status failed: {e}"

                # /scan_mode [all|strict]
                elif text.strip().startswith("/scan_mode"):
                    try:
                        parts = text.split()
                        if len(parts) < 2:
                            response_text = "Usage: /scan_mode all|strict"
                        else:
                            set_scan_mode(parts[1])
                            response_text = f"‚öôÔ∏è Scan mode set to {parts[1].lower()}"
                    except Exception as e:
                        response_text = f"‚ùå scan_mode failed: {e}"

                # /birdeye_probe [limit]
                elif text.strip().startswith("/birdeye_probe"):
                    try:
                        parts = text.split()
                        limit = int(parts[1]) if len(parts) > 1 else 10
                        res = birdeye_probe_once(limit=limit)
                        if not res.get("ok"):
                            response_text = f"‚ùå probe error: {res.get('err')}"
                        else:
                            items = res.get("items") or []
                            if not items:
                                response_text = "‚ÑπÔ∏è probe ok, no items"
                            else:
                                lines = ["üß™ Birdeye Probe (newest):", ""]
                                for it in items:
                                    mint = it.get("mint")
                                    sym  = it.get("symbol") or "?"
                                    nm   = it.get("name") or "?"
                                    be   = f"https://birdeye.so/token/{mint}?chain=solana"
                                    lines.append(f"‚Ä¢ {nm} ({sym})\n`{mint}`\n{be}")
                                response_text = "\n".join(lines)
                    except Exception as e:
                        response_text = f"‚ùå birdeye_probe failed: {e}"

                # /scan_test (quick single-shot fetch preview)
                elif text.strip().startswith("/scan_test"):
                    try:
                        res = birdeye_probe_once(limit=5)
                        if not res.get("ok"):
                            response_text = f"‚ùå scan_test: {res.get('err')}"
                        else:
                            items = res.get("items") or []
                            if not items:
                                response_text = "‚úÖ scan_test ok ‚Äî no new items right now"
                            else:
                                lines = ["‚úÖ scan_test ok ‚Äî sample:", ""]
                                for it in items:
                                    mint = it.get("mint")
                                    sym  = it.get("symbol") or "?"
                                    nm   = it.get("name") or "?"
                                    be   = f"https://birdeye.so/token/{mint}?chain=solana"
                                    pf   = f"https://pump.fun/{mint}"
                                    lines.append(f"‚Ä¢ *{nm}* ({sym})\n`{mint}`\n[Birdeye]({be}) ‚Ä¢ [Pump.fun]({pf})")
                                response_text = "\n".join(lines)
                    except Exception as e:
                        response_text = f"‚ùå scan_test failed: {e}"

# --- END PATCH ---
