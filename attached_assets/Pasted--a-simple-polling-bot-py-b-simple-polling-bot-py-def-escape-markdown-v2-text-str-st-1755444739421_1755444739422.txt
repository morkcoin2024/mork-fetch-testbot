*** a/simple_polling_bot.py
--- b/simple_polling_bot.py
@@
+def _escape_markdown_v2(text: str) -> str:
+    """
+    Escape Telegram MarkdownV2 special characters.
+    Docs: _,*,[,],(,),~,`,>,#, +,-,=,|,{,},.,!
+    Also escape backslash FIRST.
+    """
+    if text is None:
+        return ""
+    text = text.replace("\\", "\\\\")
+    for ch in "_*[]()~`>#+-=|{}.!":
+        text = text.replace(ch, f"\\{ch}")
+    return text
+
+def _is_mdv2_parse_error(resp) -> bool:
+    try:
+        if resp.status_code != 400:
+            return False
+        j = resp.json()
+        desc = (j.get("description") or "").lower()
+        return "can't parse entities" in desc
+    except Exception:
+        return False
+
@@
-    def send_message(self, chat_id, text):
-        payload = {
-            "chat_id": chat_id,
-            "text": text,
-            "parse_mode": "MarkdownV2",
-            "disable_web_page_preview": True,
-        }
-        r = requests.post(f"{self.base_url}/sendMessage", json=payload, timeout=15)
-        ok = (r.status_code == 200 and r.json().get("ok") is True)
-        if not ok:
-            logger.error(f"Failed to send message: {r.status_code} - {r.text}")
-        return ok
+    def send_message(self, chat_id, text):
+        url = f"{self.base_url}/sendMessage"
+        # Attempt 1: as-is (keep any intentional formatting)
+        payload = {
+            "chat_id": chat_id,
+            "text": text,
+            "parse_mode": "MarkdownV2",
+            "disable_web_page_preview": True,
+        }
+        r = requests.post(url, json=payload, timeout=15)
+        if r.status_code == 200 and r.json().get("ok") is True:
+            return True
+
+        # Attempt 2: if MarkdownV2 parsing failed, escape and retry
+        if _is_mdv2_parse_error(r):
+            safe_text = _escape_markdown_v2(text)
+            payload["text"] = safe_text
+            r2 = requests.post(url, json=payload, timeout=15)
+            if r2.status_code == 200 and r2.json().get("ok") is True:
+                return True
+            logger.error(f"MarkdownV2 escaped send failed: {r2.status_code} - {r2.text}")
+
+        # Attempt 3: plain text fallback (no parse_mode)
+        payload.pop("parse_mode", None)
+        payload["text"] = text
+        r3 = requests.post(url, json=payload, timeout=15)
+        if r3.status_code == 200 and r3.json().get("ok") is True:
+            return True
+
+        logger.error(f"Failed to send message (all attempts): "
+                     f"r1={r.status_code} r2={'N/A' if not _is_mdv2_parse_error(r) else r2.status_code} "
+                     f"r3={r3.status_code} body3={r3.text}")
+        return False
