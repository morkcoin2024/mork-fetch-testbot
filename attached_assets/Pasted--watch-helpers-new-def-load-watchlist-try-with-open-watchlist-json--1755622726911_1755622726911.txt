# --- watch helpers (new) ---

def _load_watchlist():
    try:
        with open("watchlist.json", "r") as f:
            return json.load(f) or []
    except Exception:
        return []

def _save_watchlist(items):
    try:
        with open("watchlist.json", "w") as f:
            json.dump(items, f, indent=2)
    except Exception:
        pass

def watch_tick_once(send_alerts=True):
    """
    Force a single evaluation of the watchlist.
    - Fetches current price for each watched mint using current source
    - Updates 'last' price in watchlist store
    - Sends alerts via alerts_send() when movement >= min_move_pct and not muted
    Returns: (checked_count, fired_alerts, summary_lines)
    """
    wl = _load_watchlist()
    if not wl:
        return 0, 0, ["(watchlist empty)"]

    # load alert config (min_move, rate limit, muted, group id)
    cfg = load_alerts_config()  # existing function in your alerts module
    min_move = float(cfg.get("min_move_pct", 0.0))
    muted = bool(cfg.get("muted", False))

    # determine price source (your existing helper; falls back safely)
    src = get_active_price_source() if 'get_active_price_source' in globals() else "auto"

    checked = 0
    fired = 0
    lines = []

    changed = False
    for item in wl:
        mint = item.get("mint") or item if isinstance(item, str) else None
        if not mint:
            continue

        pr = get_price(mint, src)  # existing function; returns {"ok":bool,"price":float,"source":str}
        if not pr or not pr.get("ok"):
            lines.append(f"- {mint[:10]}… price: (n/a)")
            continue

        price = float(pr["price"])
        last = float(item.get("last", price))
        pct = 0.0 if last == 0 else ((price - last) / last) * 100.0

        # update state
        if abs(price - last) > 1e-12:
            item["last"] = price
            changed = True

        # alert (respects mute + min_move)
        if send_alerts and not muted and abs(pct) >= min_move:
            fired += 1
            try:
                alerts_send(f"⚠️ {mint}\nΔ={pct:+.2f}%  price=${price:.6f}  src={pr.get('source','?')}")
            except Exception:
                # never crash the command
                pass

        lines.append(f"- {mint[:10]}..  last=${price:.6f} Δ={pct:+.2f}%")
        checked += 1

    if changed:
        _save_watchlist(wl)

    return checked, fired, lines
