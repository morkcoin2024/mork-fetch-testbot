def tick(self):
    if not self.running:
        return
    if not BIRDEYE_KEY:
        self.publish("scan.birdeye.error", {"err": "missing BIRDEYE_API_KEY"})
        return

    # Endpoint WITHOUT sort_by (Birdeye is flaky on that param)
    url = f"{API}/defi/tokenlist"
    params = {
        "chain": "solana",
        "offset": 0,
        "limit": 20,   # keep this modest to avoid 429s
    }

    # Small jittered backoff to play nice with 429s
    attempts = 3
    for i in range(attempts):
        try:
            r = httpx.get(url, headers=HEADERS, params=params, timeout=12)
            if r.status_code == 429:
                # Too many requests — back off with jitter then retry
                delay = 0.8 + random.random() * 0.7  # ~0.8–1.5s
                logging.warning("[SCAN] Birdeye 429; backing off %.2fs", delay)
                time.sleep(delay)
                continue

            # If Birdeye returns 400, just log once and stop retrying.
            if r.status_code == 400:
                logging.info(
                    "[SCAN] Birdeye 400 (most likely sort_by related); "
                    "using default ordering with params=%s", params
                )
                break  # no retry — response is final

            r.raise_for_status()
            data = r.json() or {}
            items = (
                data.get("data", {}).get("tokens")
                or data.get("data", [])
                or data.get("tokens", [])
                or []
            )

            new_tokens = []
            for it in items:
                mint = it.get("address") or it.get("mint") or it.get("tokenAddress")
                if not mint:
                    continue
                if self._mark_seen(mint):
                    new_tokens.append({
                        "mint": mint,
                        "symbol": it.get("symbol") or "?",
                        "name": it.get("name") or "?",
                        "price": it.get("priceUsd") or it.get("price") or None,
                    })

            if new_tokens:
                self.publish("scan.birdeye.new",
                             {"count": len(new_tokens), "items": new_tokens[:10]})
            logging.info("[SCAN] Birdeye tick ok: %s items, %s new",
                         len(items), len(new_tokens))
            return  # done

        except httpx.HTTPStatusError as e:
            logging.warning(
                "[SCAN] Birdeye status=%s url=%s body=%s",
                e.response.status_code, str(e.request.url),
                (e.response.text or "")[:200]
            )
            # Only retry on 5xx; others fall through
            if 500 <= e.response.status_code < 600 and i < attempts - 1:
                time.sleep(0.6 + random.random() * 0.6)
                continue
            break
        except Exception as e:
            logging.warning("[SCAN] Birdeye tick error: %s", e)
            if i < attempts - 1:
                time.sleep(0.6 + random.random() * 0.6)
                continue
            break
