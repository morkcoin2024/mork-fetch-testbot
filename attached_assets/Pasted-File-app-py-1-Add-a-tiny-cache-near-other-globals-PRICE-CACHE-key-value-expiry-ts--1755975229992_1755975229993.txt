File: app.py

1) Add a tiny cache near other globals:
_PRICE_CACHE = {}  # key -> (value, expiry_ts)

def _cache_get(key: str, now: float, default=None):
    v = _PRICE_CACHE.get(key)
    if not v: return default
    val, exp = v
    if now >= exp:
        _PRICE_CACHE.pop(key, None)
        return default
    return val

def _cache_set(key: str, val, now: float, ttl: float):
    _PRICE_CACHE[key] = (val, now + ttl)

2) Add/replace a Birdeye price helper (next to _short_mint etc.):
def _fmt_price(v):
    try:
        return f"${v:,.6f}" if v < 1 else f"${v:,.4f}" if v < 10 else f"${v:,.2f}"
    except Exception:
        return "?"

def _birdeye_price(mint: str, ttl: float = 30.0):
    import time
    now = time.time()
    ck = f"price:{mint}"
    cached = _cache_get(ck, now)
    if cached is not None:
        return cached
    try:
        r = birdeye_req("/defi/price", {"chain":"solana","address":mint}) or {}
        v = (r.get("data") or {}).get("value")
        out = float(v) if v is not None else None
    except Exception:
        out = None
    _cache_set(ck, out, now, ttl)
    return out

3) Reuse the same token resolver you use in /mint_for (ticker→mint). 
Name it whatever your code already uses; call it to get: (mint, symbol, name).
If you don’t have a unified function, wrap the existing logic into:
def _resolve_token_or_mint(arg: str):
    # Try: if arg looks like a mint (32/44 chars) return (mint, symbol, name)
    # Else try ticker → mint using your existing map, then derive symbol/name.
    # Return (mint, symbol, name) or (None, None, None) on failure.

4) Add a new /price branch in process_telegram_command:
elif cmd == "/price":
    if not args:
        return _reply("Usage: /price <TICKER|MINT>")
    mint, sym, nam = _resolve_token_or_mint(args.split()[0])
    if not mint:
        return _reply("Unknown token. Provide a mint or known ticker.")
    p = _birdeye_price(mint)
    sym = sym or "—"
    nam = nam or "—"
    price_txt = _fmt_price(p) if p is not None else "?"
    return _reply(f"{sym} — {nam}: {price_txt}  `{_short_mint(mint)}`")

5) Update /watchlist ‘prices’ path to use _birdeye_price(...) if not already.

6) Update /help (admin/non-admin as appropriate):
- "/price <TICKER|MINT> - Current price (Birdeye)"
- Keep the row you added: "/watchlist [prices] - Show saved mints (optionally with prices)"