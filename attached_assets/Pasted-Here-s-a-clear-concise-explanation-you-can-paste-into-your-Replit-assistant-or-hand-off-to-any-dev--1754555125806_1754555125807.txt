Here's a clear, concise explanation you can paste into your Replit assistant or hand off to any dev working on Mork‚Äôs F.E.T.C.H. Bot. It covers:

Burner wallet creation (per user)

Safety

Non-custodial design

Auto-trading from that wallet

Profit fee logic (0.5%)

MORK token hold requirement

üìú Fetch Bot ‚Äì Burner Wallet System + Fee Logic (Developer Brief)
üîê Burner Wallets ‚Äì Per User, Non-Custodial
When a user starts using F.E.T.C.H. Bot, we generate a Solana burner wallet for them via:

python
Copy
Edit
from solana.keypair import Keypair

keypair = Keypair.generate()
We save this per Telegram user (by user_id) and store:

üîë Public address (for funding + trade tracking)

üîê Private key (securely, never exposed unless user requests export)

‚ùóÔ∏è Users are informed that this wallet is non-recoverable if lost and they are responsible for backing it up if exported.

Each user has full control of their own trading wallet. We never touch it.

‚úÖ User Safety & Control
Wallet is generated locally by the bot

We do not store any Phantom wallet access or require login

No third-party custody

SOL is sent by the user from their Phantom to the burner (we only provide the address)

We provide an /exportwallet command so they can view + back up their keypair if they want

üíº Trading Requirements
Before using /snipe or /fetch, the bot will:

Scan the user's burner wallet for:

‚úÖ Minimum 100,000 MORK tokens

‚úÖ Sufficient SOL to trade

If either requirement fails, trading is disabled with an error message

ü§ñ Trading Flow (Fully Automated)
Bot identifies a good token (based on logic)

Executes a buy transaction from the user‚Äôs burner wallet

Stores:

Buy price

Bonded amount

Monitors price in real time

Executes sell transaction automatically if:

üìà Profit target hit (e.g. 2x)

üìâ Stop-loss triggered (e.g. -40%)

üßÆ Profit Check + Fee Logic
Upon sell execution, the bot compares:

python
Copy
Edit
profit = sell_price - buy_price
If profit > 0, we calculate a 0.5% fee on profit only:

python
Copy
Edit
fee = profit * 0.005
We send that fee to the marketing wallet like this:

python
Copy
Edit
send_sol(
    from=user_burner_wallet,
    to=MARKETING_WALLET_ADDRESS,
    amount=fee
)
This is seamless. Users are never charged upfront. They only pay if they make money ‚Äî and it‚Äôs automatically deducted.

üí∞ Example
User buys at 0.5 SOL

Bot sells at 1.0 SOL ‚Üí profit = 0.5

0.0025 SOL (0.5%) is sent to marketing wallet

0.9975 SOL stays in user‚Äôs burner wallet

They can withdraw it at any time via /withdraw or manually from Phantom if they‚Äôve exported the key.

üîê Security
Burner wallet private keys are stored encrypted if possible

Bot never exposes keys unless user specifically requests export

.json files are not committed to version control (in .gitignore)

Optionally: Limit max SOL per wallet to reduce risk (e.g., 2 SOL)

üìå MARKETING WALLET
Replace this placeholder in your code:

python
Copy
Edit
MARKETING_WALLET_ADDRESS = "INSERT_ADDRESS_HERE"
