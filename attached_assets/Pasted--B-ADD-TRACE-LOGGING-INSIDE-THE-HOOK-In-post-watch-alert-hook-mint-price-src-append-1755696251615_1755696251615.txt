# === B) ADD TRACE LOGGING INSIDE THE HOOK ===
# In _post_watch_alert_hook(mint, price, src), append this tracing block.
# Write a concise line to /tmp/alerts_debug.log so we can see why an alert was (not) sent.

def _post_watch_alert_hook(mint: str, price: float, src: str):
    import json, os, time, logging
    TRACE = "/tmp/alerts_debug.log"

    cfg = _load_alerts_cfg()
    chat_id = cfg.get("chat_id")
    min_move = float(cfg.get("min_move_pct", 1.0))
    rate_per_min = int(cfg.get("rate_per_min", 5))
    muted = bool(cfg.get("muted", False))
    now = int(time.time())

    base = _load_baseline()
    bl = base.get(mint)
    base_price = float(bl["price"]) if (bl and "price" in bl) else None

    delta_pct = None
    should_alert = False
    reason = "no-baseline"

    if base_price and price:
        try:
            delta_pct = (float(price) - base_price) / base_price * 100.0
        except Exception:
            delta_pct = None

    # simple rate-limit: allow one send per (60/rate_per_min) seconds
    ok_rate = True
    rl_key = f"_rl_{mint}"
    rl_state = base.get(rl_key, 0)
    min_interval = max(1, int(60 / max(1, rate_per_min)))
    if now - int(rl_state) < min_interval:
        ok_rate = False
        reason = "rate-limited"

    if muted:
        reason = "muted"
    elif not chat_id:
        reason = "no-chat"
    elif delta_pct is None:
        reason = "no-delta"
    elif abs(delta_pct) < float(min_move):
        reason = f"below-thresh({delta_pct:.4f} < {min_move:.4f})"
    elif not ok_rate:
        pass  # reason already set
    else:
        should_alert = True
        reason = "send"

    # write single-line trace
    try:
        with open(TRACE, "a") as f:
            f.write(f"{now} mint={mint[:12]}.. price={price:.6f} base={base_price} "
                    f"Δ={delta_pct} src={src} chat={chat_id} muted={muted} "
                    f"min_move={min_move} rate={rate_per_min}/min -> {reason}\n")
    except Exception:
        pass

    # send and update baseline if we alerted
    if should_alert:
        arrow = "▼" if delta_pct < 0 else "▲"
        msg = (f"*Price Alert {arrow} {delta_pct:+.2f}%*\n"
               f"`{mint[:12]}..`\n"
               f"*Price:* ${price:.6f}\n*Source:* {src}")
        try:
            alerts_send(chat_id, msg)  # existing helper to send MarkdownV2/Markdown as used elsewhere
        except Exception as e:
            logging.exception("alerts_send failed: %s", e)

        # update rate limit stamp
        base[rl_key] = now

    # always refresh baseline to current
    base[mint] = {"price": float(price), "ts": now, "src": src}
    _save_baseline(base)
