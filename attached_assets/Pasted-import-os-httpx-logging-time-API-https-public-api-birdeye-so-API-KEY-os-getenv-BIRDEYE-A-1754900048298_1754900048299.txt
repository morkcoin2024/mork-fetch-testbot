import os, httpx, logging, time
API = "https://public-api.birdeye.so"
API_KEY = os.getenv("BIRDEYE_API_KEY", "").strip()

class BirdeyeScanner:
    def __init__(self, interval_sec=10, publish=None):
        self.interval = max(5, int(interval_sec))
        self.publish = publish or (lambda _t, _d: None)
        self.seen = set()

    def _headers(self):
        h = {
            "accept": "application/json",
            "x-chain": "solana",
            "user-agent": "mork-fetch/1.0",
        }
        if API_KEY:
            h["x-api-key"] = API_KEY
        return h

    def _mark_seen(self, mint):
        if mint in self.seen:
            return False
        self.seen.add(mint)
        return True

    def tick(self):
        """
        Poll newest tokens from Birdeye.
        Free plan requires x-api-key + x-chain + /defi/tokenlist.
        """
        try:
            url = f"{API}/defi/tokenlist"
            params = {
                "sort_by": "createdTime",
                "sort_type": "desc",
                "offset": 0,
                "limit": 50,
            }
            r = httpx.get(url, headers=self._headers(), params=params, timeout=12)
            r.raise_for_status()
            data = r.json() or {}

            items = (
                data.get("data", {}).get("tokens")
                or data.get("data", [])
                or data.get("tokens", [])
                or []
            )

            new_items = []
            for it in items:
                mint = it.get("address") or it.get("mint") or it.get("tokenAddress")
                if not mint:
                    continue
                if self._mark_seen(mint):
                    new_items.append({
                        "mint": mint,
                        "symbol": it.get("symbol") or "?",
                        "name": it.get("name") or "?",
                        "price": it.get("priceUsd") or it.get("price") or None,
                    })

            if new_items:
                self.publish("scan.birdeye.new", {"count": len(new_items), "items": new_items[:10]})

        except httpx.HTTPStatusError as e:
            logging.warning("[SCAN] Birdeye status=%s url=%s body=%s",
                            e.response.status_code, str(e.request.url), e.response.text[:200])
        except Exception as e:
            logging.warning("[SCAN] Birdeye tick error: %s", e)

    def run_forever(self):
        while True:
            self.tick()
            time.sleep(self.interval)
