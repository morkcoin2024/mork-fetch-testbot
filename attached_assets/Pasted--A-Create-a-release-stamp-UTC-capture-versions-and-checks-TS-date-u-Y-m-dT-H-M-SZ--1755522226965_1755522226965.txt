# A) Create a release stamp (UTC) + capture versions and checks
TS=$(date -u +"%Y-%m-%dT%H-%M-%SZ")
REL="tg-stable-${TS}"

mkdir -p release_logs

python3 - <<'PY'
import os, json, hashlib, inspect, time
import app
info = {
  "release_ts_utc": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
  "mode": "Polling (integrated)",
  "has_tg_send": hasattr(app, "tg_send"),
  "router_hash": hash(inspect.getsource(app.process_telegram_command)),
  "files": {},
  "env_summary": {
      "TELEGRAM_BOT_TOKEN_len": len(os.getenv("TELEGRAM_BOT_TOKEN","")),
      "ASSISTANT_ADMIN_TELEGRAM_ID": os.getenv("ASSISTANT_ADMIN_TELEGRAM_ID","unset")
  }
}
for fn in ["app.py","telegram_polling.py","working_polling_bot.py","production_polling_bot.py"]:
    if os.path.exists(fn):
        info["files"][fn] = hashlib.sha256(open(fn,"rb").read()).hexdigest()
print(json.dumps(info, indent=2))
open("build-info.json","w").write(json.dumps(info, indent=2))
PY

# B) Append RELEASE_NOTES entry and Git tag (best effort; ignore if no git)
echo -e "## ${TS} â€” TG stable\n- Mode: Polling (integrated)\n- Unified sender active (tg_send)\n" >> RELEASE_NOTES.md
git add -A 2>/dev/null && git commit -m "release: ${REL}" 2>/dev/null || true
git tag -f "${REL}" 2>/dev/null || true

# C) Safety: ensure webhook OFF (idempotent)
curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/deleteWebhook" \
| python3 - <<'PY'
import sys,json; d=json.load(sys.stdin); print("deleteWebhook ok=", d.get("ok"))
PY

# D) Save a short health snapshot for this release
{
  echo "=== ${REL} health ==="
  echo -n "Process grep: " && ps aux | grep -E "telegram_polling|gunicorn|production_polling_bot" | grep -v grep || true
  echo -n "Webhook URL: " && curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getWebhookInfo" \
    | python3 - <<'PY'
import sys,json; d=json.load(sys.stdin); print(d.get('result',{}).get('url'))
PY
  echo -n "Pending: " && curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates?timeout=1" \
    | python3 - <<'PY'
import sys,json; d=json.load(sys.stdin); print(len(d.get('result',[])))
PY
  echo "--- last 40 app log lines ---"
  tail -n 40 live_bot.log 2>/dev/null || echo "no live_bot.log yet"
} > "release_logs/${REL}.log" 2>&1

echo "Release stamped as: ${REL}"
