# === Alerts mute/unmute with timed duration ===
# Adds:
#   /alerts_mute <duration>   (e.g., 15m, 1h, 2h30m, or minutes as number)
#   /alerts_unmute
#   /alerts_settings now shows muted_until

cd /home/runner/workspace

applypatch <<'PATCH'
*** Begin Patch
*** Update File: app.py
@@
-        try:
-            with open(_ALERT_CFG_PATH, "r") as f:
-                _ALERT_CFG = json.load(f)
-        except Exception:
-            _ALERT_CFG = {"chat_id": None, "min_move_pct": 0.0, "rate_per_min": 60}
+        try:
+            with open(_ALERT_CFG_PATH, "r") as f:
+                _ALERT_CFG = json.load(f)
+        except Exception:
+            _ALERT_CFG = {"chat_id": None, "min_move_pct": 0.0, "rate_per_min": 60, "muted_until": 0}
@@
-            return _reply(
+            import time
+            mu = float(_ALERT_CFG.get("muted_until", 0) or 0)
+            remaining = max(0, int(mu - time.time()))
+            return _reply(
                 "üìü Alerts settings:\n"
                 f"chat: {cid if cid else 'not set'}\n"
                 f"min_move_pct: { _ALERT_CFG.get('min_move_pct', 0.0) }%\n"
-                f"rate_per_min: { _ALERT_CFG.get('rate_per_min', 60) }"
+                f"rate_per_min: { _ALERT_CFG.get('rate_per_min', 60) }\n"
+                f"muted: {'yes' if remaining>0 else 'no'}"
+                + (f" ({remaining}s left)" if remaining>0 else "")
             )
@@
             def _notify_line(txt: str):
                 cid = _ALERT_CFG.get("chat_id")
                 if cid:
-                    # threshold filter ‚Äî look for ¬±X.XX%
-                    import re, time
+                    # mute check
+                    import time, re
+                    if float(_ALERT_CFG.get("muted_until", 0) or 0) > time.time():
+                        return
+                    # threshold filter ‚Äî look for ¬±X.XX%
                     m = re.search(r'([+-]?\d+(?:\.\d+)?)%', txt)
                     if m:
                         try:
                             move = abs(float(m.group(1)))
                             if move < float(_ALERT_CFG.get("min_move_pct", 0.0)):
                                 return  # below threshold
                         except Exception:
                             pass
@@
         elif cmd == "/alerts_rate":
             deny = _require_admin(user)
             if deny: return deny
@@
             _ALERT_CFG["rate_per_min"] = n
             try:
                 with open(_ALERT_CFG_PATH, "w") as f: json.dump(_ALERT_CFG, f)
             except Exception: pass
             return _reply(f"‚úÖ rate_per_min set to {n}")
+
+        elif cmd == "/alerts_mute":
+            deny = _require_admin(user)
+            if deny: return deny
+            if not args:
+                return _reply("Usage: /alerts_mute <duration>\nExamples: 15m, 1h, 2h30m, 45")
+            import re, time
+            s = args.strip().lower()
+            # parse "2h30m", "90m", "45" (minutes)
+            total_sec = 0
+            m = re.fullmatch(r'(?:\s*(\d+)\s*h)?\s*(?:\s*(\d+)\s*m)?\s*', s)
+            if 'h' in s or 'm' in s:
+                if m:
+                    h = int(m.group(1) or 0); mins = int(m.group(2) or 0)
+                    total_sec = h*3600 + mins*60
+            else:
+                try:
+                    total_sec = int(float(s)) * 60
+                except:
+                    return _reply("‚ö†Ô∏è Invalid duration. Try 15m or 1h30m.")
+            total_sec = max(60, min(total_sec, 24*3600))  # 1 min .. 24h
+            _ALERT_CFG["muted_until"] = time.time() + total_sec
+            try:
+                with open(_ALERT_CFG_PATH, "w") as f: json.dump(_ALERT_CFG, f)
+            except Exception: pass
+            return _reply(f"üîï Alerts muted for {total_sec//60} min")
+
+        elif cmd == "/alerts_unmute":
+            deny = _require_admin(user)
+            if deny: return deny
+            _ALERT_CFG["muted_until"] = 0
+            try:
+                with open(_ALERT_CFG_PATH, "w") as f: json.dump(_ALERT_CFG, f)
+            except Exception: pass
+            return _reply("üîî Alerts unmuted")
*** End Patch
PATCH

# quick smoke
python3 - <<'PY'
from app import process_telegram_command
def mk(t):
    upd={'message':{'message_id':1,'date':0,'chat':{'id':1,'type':'private'},
                    'from':{'id':1,'is_bot':False,'username':'admin'},'text':t}}
    out=process_telegram_command(upd) or {}
    print(t, "->", out.get("status"), (out.get("response") or "").replace("\n"," ")[:120])
for t in ["/alerts_settings","/alerts_mute 2m","/alerts_settings","/alerts_unmute","/alerts_settings"]:
    mk(t)
PY
