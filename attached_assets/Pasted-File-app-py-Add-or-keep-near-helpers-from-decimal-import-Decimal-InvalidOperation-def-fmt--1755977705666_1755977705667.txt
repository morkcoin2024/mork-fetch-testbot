File: app.py

# Add (or keep) near helpers:
from decimal import Decimal, InvalidOperation

def _fmt_usd(v) -> str:
    try:
        q = Decimal(str(v)).quantize(Decimal("0.01"))
        return f"${q:,.2f}"
    except (InvalidOperation, Exception):
        return "?"

def _num_or_none(x):
    try:
        return float(x)
    except Exception:
        return None

def _birdeye_token_overview(mint: str) -> dict:
    try:
        r = _birdeye_req("/defi/token_overview", {"chain": "solana", "address": mint}) or {}
        d = (r.get("data") or {})

        liq = d.get("liquidity") or d.get("liquidity_usd") or d.get("liquidityUSD") or d.get("liquidityUsd")
        v24 = d.get("v24") or d.get("v24USD") or d.get("volume24hUSD") or d.get("volume24h_usd") or d.get("volume24h")
        mc  = d.get("mc")  or d.get("marketcap") or d.get("marketCap") or d.get("market_cap") or d.get("marketCapUsd")

        return {"liquidity": _num_or_none(liq), "v24": _num_or_none(v24), "mc": _num_or_none(mc)}
    except Exception:
        return {"liquidity": None, "v24": None, "mc": None}

# === REPLACE the ENTIRE /liquidity branch with this v2 (and delete any other /liquidity branches) ===
elif cmd == "/liquidity":  # [LIQ_V2]
    target = (args or "").split()[0] if args else ""
    mint = _resolve_to_mint(target)
    if not mint:
        return _reply("Usage: `/liquidity <MINT|TICKER>` â€” unknown token.", "error")

    short = _short_mint(mint)
    name  = _display_name_for(mint) or short
    info  = _birdeye_token_overview(mint)

    liq = info.get("liquidity")
    v24 = info.get("v24")
    mc  = info.get("mc")

    liq_s = _fmt_usd(liq) if liq is not None else "?"
    v24_s = _fmt_usd(v24) if v24 is not None else "?"
    mc_s  = _fmt_usd(mc)  if mc  is not None else None

    try:
        logger.info("LIQ_V2: formatted with _fmt_usd")
    except Exception:
        pass

    lines = [
        "ðŸŒŠ *Liquidity*",
        f"{name}",
        f"`{short}`",
        f"Liquidity: {liq_s}",
        f"24h Volume: {v24_s}",
    ]
    if mc_s:
        lines.append(f"Market Cap: {mc_s}")
    return _reply("\n".join(lines), "ok")
