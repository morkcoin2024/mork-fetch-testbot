# === LOCK-IN SNAPSHOT: stamp current working release + runtime capture ===
cd /home/runner/workspace

TS=$(date -u +"%Y-%m-%dT%H-%M-%SZ")
REL="tg-stable-${TS}"
mkdir -p releases "release_logs/${REL}" || true

# Build info (hashes + router signature)
python3 - <<'PY'
import json, hashlib, inspect, time
import app
def sha(p):
    try:
        with open(p,"rb") as f: return hashlib.sha256(f.read()).hexdigest()
    except: return "missing"
info = {
  "release_ts_utc": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
  "label": "stable",
  "mode": "Polling (integrated)",
  "router_hash": hash(inspect.getsource(app.process_telegram_command)),
  "files": {p: sha(p) for p in ["app.py","telegram_polling.py","autosell.py"]},
}
open("build-info.json","w").write(json.dumps(info, indent=2))
print(json.dumps(info, indent=2))
PY

# Runtime state snapshot: alerts config + autosell status/rules
python3 - <<'PY'
import json, time, os, importlib
snap = {"ts_utc": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())}
# alerts config
cfg = {}
for cand in ["alert_chat.json","alerts.json","config/alert_chat.json"]:
    if os.path.exists(cand):
        try: cfg = json.load(open(cand)); break
        except: pass
snap["alerts_cfg"] = cfg or {"chat_id": None}
# autosell
try:
    autosell = importlib.import_module("autosell")
    st = autosell.status() if hasattr(autosell,"status") else {}
    rules = []
    for name in ("get_rules","rules","list_rules"):
        if hasattr(autosell,name):
            try:
                r = getattr(autosell,name)()
                rules = r if isinstance(r,list) else list(r)
                break
            except: pass
    snap["autosell"] = {"status": st, "rules": rules}
except Exception as e:
    snap["autosell_error"] = str(e)
open("runtime-snapshot.json","w").write(json.dumps(snap, indent=2))
print("runtime snapshot ok")
PY

# Package release artefacts
tar -czf "releases/${REL}.tar.gz" app.py telegram_polling.py autosell.py build-info.json runtime-snapshot.json 2>/dev/null || true

# Keep a short log excerpt for provenance
{ echo "=== ${REL} ==="
  echo -n "Webhook: "; curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getWebhookInfo" \
    | python3 - <<'PY' import sys,json; print(json.load(sys.stdin).get('result',{}).get('url')) PY
  echo "--- tail live_bot.log ---"
  tail -n 200 live_bot.log 2>/dev/null || echo "(no live_bot.log)"
} > "release_logs/${REL}/provenance.log" 2>&1

echo "Release stamped: ${REL}"
ls -lh "releases/${REL}.tar.gz" || true
