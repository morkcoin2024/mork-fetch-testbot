# --- Canonical numeric getters used by both single-token commands and watchlist ---

def _supply_value_for_mint(mint: str):
    # Prefer circulating; fallback to total
    for name in (
        "_get_circulating_supply_for_mint",
        "_get_supply_for_mint",
        "_get_supply_for",
        "_get_total_supply_for_mint",
        "_get_total_supply_for",
    ):
        fn = globals().get(name)
        if callable(fn):
            try:
                v = fn(mint)
                if v is not None:
                    return float(v)
            except Exception:
                pass
    return None

def _fdv_value_for_mint(mint: str):
    # Native FDV; fallback to price * total supply
    for name in ("_get_fdv_for_mint", "_fdv_for_mint"):
        fn = globals().get(name)
        if callable(fn):
            try:
                v = fn(mint)
                if v is not None:
                    return float(v)
            except Exception:
                pass
    # fallback
    price = None
    total = None
    for name in ("_get_price_for_mint", "_price_for_mint"):
        fn = globals().get(name)
        if callable(fn):
            try:
                price = fn(mint);
                if price is not None: price = float(price)
            except Exception:
                price = None
    for name in ("_get_total_supply_for_mint", "_get_supply_for_mint", "_get_supply_for"):
        fn = globals().get(name)
        if callable(fn):
            try:
                total = fn(mint);
                if total is not None: total = float(total)
            except Exception:
                total = None
    return (price * total) if (price is not None and total is not None) else None

def _holders_value_for_mint(mint: str):
    for name in ("_get_holders_for_mint", "_holders_for_mint", "_get_holders_for"):
        fn = globals().get(name)
        if callable(fn):
            try:
                v = fn(mint)
                if v is not None:
                    return int(float(v))
            except Exception:
                pass
    return None

def _volume24h_value_for_mint(mint: str):
    for name in ("_get_volume_24h_for_mint", "_volume_24h_for_mint", "_get_24h_volume_for_mint",
                 "_get_liquidity_volume_24h_for_mint"):
        fn = globals().get(name)
        if callable(fn):
            try:
                v = fn(mint)
                if v is not None:
                    return float(v)
            except Exception:
                pass
    return None
