import threading
import time
import json
import websocket
import logging

log = logging.getLogger(__name__)

class BirdeyeWS:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.url = f"wss://public-api.birdeye.so/socket?x-api-key={api_key}"

        self._running = False
        self._th = None
        self._ws = None

        # Thread-safe connection state
        self._connected_event = threading.Event()

        # Message counters
        self.recv_count = 0
        self.new_count = 0
        self.seen_cache = set()

        # Optional "tap" mode expiry
        self._tap_until = 0

        # Track last message time
        self.last_msg_time = None

    def status(self):
        """Return current connection status in a JSON-serialisable dict."""
        return {
            "running": self._running,
            "connected": self._connected_event.is_set(),
            "recv": self.recv_count,
            "new": self.new_count,
            "seen_cache": len(self.seen_cache),
            "thread_alive": bool(self._th and self._th.is_alive()),
            "mode": "strict",
            "tap_enabled": time.time() < self._tap_until,
            "last_msg_time": self.last_msg_time
        }

    def start(self):
        if self._running:
            log.info("[WS] Already running")
            return

        self._running = True
        self._th = threading.Thread(target=self._run_forever, daemon=True)
        self._th.start()
        log.info("[WS] Birdeye WS started with Launchpad priority")

    def stop(self):
        self._running = False
        self._connected_event.clear()
        if self._ws:
            try:
                self._ws.close()
            except Exception:
                pass
        log.info("[WS] Birdeye WS stopped")

    def _run_forever(self):
        """Thread target for persistent WebSocket connection."""
        while self._running:
            try:
                headers = {
                    "Origin": "https://public-api.birdeye.so",
                    "User-Agent": "Mork-FETCH-Bot/1.0",
                }
                self._ws = websocket.WebSocketApp(
                    self.url,
                    on_open=self._on_open,
                    on_close=self._on_close,
                    on_message=self._on_message,
                    on_error=self._on_error,
                    header=[f"{k}: {v}" for k, v in headers.items()],
                    subprotocols=["echo-protocol"],
                )
                self._ws.run_forever(
                    ping_interval=20,
                    ping_timeout=10,
                    ping_payload="ping"
                )
            except Exception as e:
                log.error("[WS] Fatal error in run_forever: %s", e)
            finally:
                self._connected_event.clear()
                if self._running:
                    time.sleep(3)  # Retry delay

    def _on_open(self, ws):
        self._connected_event.set()
        log.info("[WS] open")
        log.info("[WS] Connected to Birdeye feed")
        # Send subscriptions
        self._send({"type": "subscribe", "topic": "launchpad.created", "chain": "solana"})
        self._send({"type": "subscribe", "topic": "token.created", "chain": "solana"})
        self._send({"type": "subscribe", "topic": "token.updated", "chain": "solana"})
        log.info("[WS] Subscriptions sent")

    def _on_close(self, ws, code, reason):
        self._connected_event.clear()
        log.info("[WS] Closed (code=%s reason=%s)", code, reason)

    def _on_error(self, ws, error):
        self._connected_event.clear()
        log.warning("[WS] error: %r", error)

    def _on_message(self, ws, message):
        self.recv_count += 1
        self.last_msg_time = time.time()

        # Example new token processing logic
        try:
            data = json.loads(message)
            if self._is_new_token_event(data):
                self.new_count += 1
                token_id = data.get("token", {}).get("address")
                if token_id:
                    self.seen_cache.add(token_id)
                    log.info("[WS] New token: %s", token_id)
        except Exception as e:
            log.warning("[WS] Failed to process message: %s", e)

    def _is_new_token_event(self, data):
        """Example event filter."""
        return data.get("topic") in {"launchpad.created", "token.created"}

    def _send(self, obj):
        try:
            self._ws.send(json.dumps(obj))
        except Exception as e:
            log.warning("[WS] Send failed: %s", e)

    # Helper methods for admin commands
    def injectdebugevent(self, event):
        log.info("[WS] Injected debug event: %r", event)
        return True

    def getdebugcache(self):
        return list(self.seen_cache)

    def set_debug(self, value: bool):
        log.info("[WS] Debug mode set to %s", value)